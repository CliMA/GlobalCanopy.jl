var documenterSearchIndex = {"docs":
[{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"EditURL = \"https://github.com/CliMA/GriddingMachine.jl/blob/master/docs/src/preview.jl\"","category":"page"},{"location":"generated/preview/#Dataset-Previews","page":"Data Preview","title":"Dataset Previews","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"First, initialize by adding tools and declare floating type","category":"page"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"using GriddingMachine\nusing PkgUtility\nusing Plots\nusing Plots.PlotMeasures\n\nENV[\"GKSwstype\"]=\"100\";\nFT = Float32;\n# use this to fix the problem in generated preview.jl file\nF1 = joinpath(@__DIR__, \"../../Artifacts.toml\");\nF2 = joinpath(@__DIR__, \"../../../Artifacts.toml\");\nGRIDDINGMACHINE_ARTIFACTS = (isfile(F1) ? F1 : F2);\n\npredownload_artifact.([\"GPP_MPI_v006_1X_8D\", \"GPP_VPM_v20_1X_8D\",\n                       \"NPP_MODIS_1X_1Y\", \"canopy_height_20X_1Y\",\n                       \"clumping_index_12X_1Y\", \"clumping_index_2X_1Y_PFT\",\n                       \"land_mask_ERA5_4X_1Y\", \"leaf_area_index_4X_1M\",\n                       \"leaf_chlorophyll_2X_7D\", \"leaf_traits_2X_1Y\",\n                       \"river_maps_4X_1Y\", \"SIF_TROPOMI_740_1X_1M\",\n                       \"surface_data_2X_1Y\", \"tree_density_12X_1Y\"],\n                      GRIDDINGMACHINE_ARTIFACTS);\nnothing #hide","category":"page"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"Then, define a function to plot the dataset","category":"page"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"function preview_data(ds::GriddedDataset{FT}, ind::Int)\n    # preview data\n    return heatmap(view(ds.data,:,:,ind)',\n                   origin=\"lower\",\n                   aspect_ratio=1,\n                   xticks=[],\n                   yticks=[],\n                   c=:viridis,\n                   size=(700,300),\n                   framestyle=:none)\nend\n\nfunction preview_data(ds::GriddedDataset{FT}, ind::Int, clim::Tuple)\n    # preview data\n    return heatmap(view(ds.data,:,:,ind)',\n                   origin=\"lower\",\n                   aspect_ratio=1,\n                   xticks=[],\n                   yticks=[],\n                   c=:viridis,\n                   clim=clim,\n                   size=(700,300),\n                   framestyle=:none)\nend","category":"page"},{"location":"generated/preview/#Leaf-level-datasets","page":"Data Preview","title":"Leaf level datasets","text":"","category":"section"},{"location":"generated/preview/#Leaf-chlorophyll-content","page":"Data Preview","title":"Leaf chlorophyll content","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"LCH_LUT = load_LUT(LeafChlorophyll{FT}());\nmask_LUT!(LCH_LUT, FT[0,Inf]);\nLCH_LUT = regrid_LUT(LCH_LUT, Int(size(LCH_LUT.data,2)/180));\nanim = @animate for i ∈ 1:size(LCH_LUT.data,3)\n    preview_data(LCH_LUT, i, (0,80));\nend\ngif(anim, fps=5)","category":"page"},{"location":"generated/preview/#Leaf-nitrogen-content","page":"Data Preview","title":"Leaf nitrogen content","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"LNC_LUT = load_LUT(LeafNitrogen{FT}());\nmask_LUT!(LNC_LUT, FT[0,Inf]);\nLNC_LUT = regrid_LUT(LNC_LUT, Int(size(LNC_LUT.data,2)/180));\npreview_data(LNC_LUT, 1)","category":"page"},{"location":"generated/preview/#Leaf-phosphorus-content","page":"Data Preview","title":"Leaf phosphorus content","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"LPC_LUT = load_LUT(LeafPhosphorus{FT}());\nmask_LUT!(LPC_LUT, FT[0,Inf]);\nLPC_LUT = regrid_LUT(LPC_LUT, Int(size(LPC_LUT.data,2)/180));\npreview_data(LPC_LUT, 1)","category":"page"},{"location":"generated/preview/#Specific-leaf-area","page":"Data Preview","title":"Specific leaf area","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"SLA_LUT = load_LUT(LeafSLA{FT}());\nmask_LUT!(SLA_LUT, FT[0,Inf]);\nSLA_LUT = regrid_LUT(SLA_LUT, Int(size(SLA_LUT.data,2)/180));\npreview_data(SLA_LUT, 1)","category":"page"},{"location":"generated/preview/#Vcmax","page":"Data Preview","title":"Vcmax","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"VCM_LUT = load_LUT(VcmaxOptimalCiCa{FT}());\nmask_LUT!(VCM_LUT, FT[0,Inf]);\nVCM_LUT = regrid_LUT(VCM_LUT, Int(size(VCM_LUT.data,2)/180));\npreview_data(VCM_LUT, 1)","category":"page"},{"location":"generated/preview/#Stand-level-datasets","page":"Data Preview","title":"Stand level datasets","text":"","category":"section"},{"location":"generated/preview/#Canopy-height","page":"Data Preview","title":"Canopy height","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"CHT_LUT = load_LUT(CanopyHeightGLAS{FT}());\nmask_LUT!(CHT_LUT, FT[0,Inf]);\nCHT_LUT = regrid_LUT(CHT_LUT, Int(size(CHT_LUT.data,2)/180));\npreview_data(CHT_LUT, 1)","category":"page"},{"location":"generated/preview/#Clumping-index","page":"Data Preview","title":"Clumping index","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"# global clumping index\nCLI_LUT = load_LUT(ClumpingIndexMODIS{FT}(), \"12X\", \"1Y\");\nmask_LUT!(CLI_LUT, FT[0,1]);\nCLI_LUT = regrid_LUT(CLI_LUT, Int(size(CLI_LUT.data,2)/180));\npreview_data(CLI_LUT, 1, (0.4,1))","category":"page"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"# global clumping index per PFT\nCLI_LUT = load_LUT(ClumpingIndexPFT{FT}());\nmask_LUT!(CLI_LUT, FT[0,1]);\nCLI_LUT = regrid_LUT(CLI_LUT, Int(size(CLI_LUT.data,2)/180));\nanim = @animate for i ∈ 1:size(CLI_LUT.data,3)\n    preview_data(CLI_LUT, i, (0.4,1));\nend\ngif(anim, fps=1)","category":"page"},{"location":"generated/preview/#Gross-primary-productivity","page":"Data Preview","title":"Gross primary productivity","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"# GPP MPI\nanim = @animate for year ∈ 2001:2019, i ∈ 1:46\n    GPP_LUT = load_LUT(GPPMPIv006{FT}(), year, \"1X\", \"8D\");\n    mask_LUT!(GPP_LUT, FT[-100,Inf]);\n    preview_data(GPP_LUT, i, (0,10));\nend\ngif(anim, fps=20)","category":"page"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"# GPP VPM\nanim = @animate for year ∈ 2000:2019, i ∈ 1:46\n    @show year;\n    GPP_LUT = load_LUT(GPPVPMv20{FT}(), year, \"1X\", \"8D\");\n    mask_LUT!(GPP_LUT, FT[-100,Inf]);\n    preview_data(GPP_LUT, i, (0,10));\nend\ngif(anim, fps=20)","category":"page"},{"location":"generated/preview/#Leaf-area-index","page":"Data Preview","title":"Leaf area index","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"LAI_LUT = load_LUT(LAIMonthlyMean{FT}());\nLAI_LUT = regrid_LUT(LAI_LUT, Int(size(LAI_LUT.data,2)/180));\nanim = @animate for i ∈ 1:size(LAI_LUT.data,3)\n    preview_data(LAI_LUT, i, (0,6));\nend\ngif(anim, fps=1)","category":"page"},{"location":"generated/preview/#Net-primary-productivity","page":"Data Preview","title":"Net primary productivity","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"NPP_LUT = load_LUT(NPPModis{FT}());\nmask_LUT!(NPP_LUT, FT[-Inf,1e19]);\nNPP_LUT = regrid_LUT(NPP_LUT, Int(size(NPP_LUT.data,2)/180));\nNPP_LUT.data .*= 1e9;\npreview_data(NPP_LUT, 1)","category":"page"},{"location":"generated/preview/#Sun-induced-fluorescence","page":"Data Preview","title":"Sun induced fluorescence","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"SIF_LUT = load_LUT(SIFTropomi740{FT}(), 2018, \"1X\", \"1M\");\nmask_LUT!(SIF_LUT, FT[-100,100]);\nanim = @animate for i ∈ 1:12\n    preview_data(SIF_LUT, i, (0,3.5));\nend\ngif(anim, fps=3)","category":"page"},{"location":"generated/preview/#Tree-density","page":"Data Preview","title":"Tree density","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"TDT_LUT = load_LUT(TreeDensity{FT}(), \"12X\", \"1Y\");\nmask_LUT!(TDT_LUT, FT[0,Inf]);\nTDT_LUT = regrid_LUT(TDT_LUT, Int(size(TDT_LUT.data,2)/180));\npreview_data(TDT_LUT, 1, (0, 150000))","category":"page"},{"location":"generated/preview/#Land-surface","page":"Data Preview","title":"Land surface","text":"","category":"section"},{"location":"generated/preview/#Land-elevation","page":"Data Preview","title":"Land elevation","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"ELE_LUT = load_LUT(LandElevation{FT}());\nmask_LUT!(ELE_LUT, FT[0,Inf]);\nELE_LUT = regrid_LUT(ELE_LUT, Int(size(ELE_LUT.data,2)/180));\npreview_data(ELE_LUT, 1)","category":"page"},{"location":"generated/preview/#Land-mask","page":"Data Preview","title":"Land mask","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"LMK_LUT = load_LUT(LandMaskERA5{FT}());\nLMK_LUT = regrid_LUT(LMK_LUT, Int(size(LMK_LUT.data,2)/180));\npreview_data(LMK_LUT, 1)","category":"page"},{"location":"generated/preview/#River-flood-plain-height","page":"Data Preview","title":"River flood plain height","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"FLD_LUT = load_LUT(FloodPlainHeight{FT}());\nmask_LUT!(FLD_LUT, FT[0,Inf]);\nFLD_LUT = regrid_LUT(FLD_LUT, Int(size(FLD_LUT.data,2)/180));\npreview_data(FLD_LUT, 1)","category":"page"},{"location":"generated/preview/#River-height","page":"Data Preview","title":"River height","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"RVH_LUT = load_LUT(RiverHeight{FT}());\nmask_LUT!(RVH_LUT, FT[0,Inf]);\nRVH_LUT = regrid_LUT(RVH_LUT, Int(size(RVH_LUT.data,2)/180));\npreview_data(RVH_LUT, 1)","category":"page"},{"location":"generated/preview/#River-width","page":"Data Preview","title":"River width","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"RVW_LUT = load_LUT(RiverWidth{FT}());\nmask_LUT!(RVW_LUT, FT[0,Inf]);\nRVW_LUT = regrid_LUT(RVW_LUT, Int(size(RVW_LUT.data,2)/180));\npreview_data(RVW_LUT, 1)","category":"page"},{"location":"generated/preview/#River-length","page":"Data Preview","title":"River length","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"RVL_LUT = load_LUT(RiverLength{FT}());\nmask_LUT!(RVL_LUT, FT[0,Inf]);\nRVL_LUT = regrid_LUT(RVL_LUT, Int(size(RVL_LUT.data,2)/180));\npreview_data(RVL_LUT, 1)","category":"page"},{"location":"generated/preview/#River-manning-coefficient","page":"Data Preview","title":"River manning coefficient","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"RVM_LUT = load_LUT(LandMaskERA5{FT}());\nRVM_LUT = regrid_LUT(RVM_LUT, Int(size(RVM_LUT.data,2)/180));\npreview_data(RVM_LUT, 1)","category":"page"},{"location":"generated/preview/#River-unit-catchment-area","page":"Data Preview","title":"River unit catchment area","text":"","category":"section"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"UCA_LUT = load_LUT(UnitCatchmentArea{FT}());\nUCA_LUT = regrid_LUT(UCA_LUT, Int(size(UCA_LUT.data,2)/180));\npreview_data(UCA_LUT, 1)","category":"page"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"","category":"page"},{"location":"generated/preview/","page":"Data Preview","title":"Data Preview","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#GriddingMachine","page":"Home","title":"GriddingMachine","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Global datasets to feed CliMA Land model","category":"page"},{"location":"#Install-and-use","page":"Home","title":"Install and use","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg;\nPkg.add(PackageSpec(url=\"https://github.com/CliMA/GriddingMachine.jl.git\", rev=\"main\"));","category":"page"},{"location":"","page":"Home","title":"Home","text":"using GriddingMachine\n\nFT = Float32;\nLAI_LUT = load_LUT(LAIMonthlyMean{FT}());\n\n# read the lai at lat=30, lon=-100, month=Augest\nlai_val = read_LUT(LAI_LUT, FT(30), FT(-100), 8);\n@show lai_val;","category":"page"},{"location":"#Collected-Datasets","page":"Home","title":"Collected Datasets","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Structure Name Artifact Description\nCanopyHeightGLAS canopy_height_20X_1Y 1/20  degree resolution, year 2005\nClumpingIndexMODIS clumping_index_12X_1Y 1/240 degree resolution, year 2006\n clumping_index_240X_1Y 1/240 degree resolution, year 2006\nClumpingIndexPFT clumping_index_2X_1Y_PFT 1/2   degree resolution per PFT, year 2006\nFloodPlainHeight river_maps_4X_1Y 1/4   degree resolution\nGPPMPIv006 GPP_MPI_v006_2X_8D 1/2   degree resolution per 8 days, year 2001-2019\n GPP_MPI_v006_2X_1M 1/2   degree resolution per month, year 2001-2019\nGPPVPMv20 GPP_VPM_v20_5X_8D 1/5   degree resolution per 8 days, year 2000-2019\n GPP_VPM_v20_12X_8D 1/12  degree resolution per 8 days, year 2000-2019\nLAIMonthlyMean leaf_area_index_4X_1M 1/4   degree resolution per month, mean of year 1981-2015\nLandElevation river_maps_4X_1Y 1/4   degree resolution\nLandMaskERA5 land_mask_ERA5_4X_1Y 1/4   degree resolution\nLeafChlorophyll leaf_chlorophyll_2X_7D 1/2   degree resolution per week, mean of year 2003-2011\nLeafNitrogen leaf_traits_2X_1Y 1/2   degree resolution, mean from report literature\nLeafPhosphorus  \nLeafSLA  \nNPPModis NPP_MODIS_1X_1Y 1/1   degree resolution, year 2000\nRiverHeight river_maps_4X_1Y 1/4   degree resolution\nRiverLength  \nRiverManning  \nRiverWidth  \nTreeDensity tree_density_12X_1Y 1/12  degree resolution, derived from ML\n tree_density_120X_1Y 1/120 degree resolution, derived from ML\nUnitCatchmentArea river_maps_4X_1Y 1/4   degree resolution\nVcmaxOptimalCiCa leaf_traits_2X_1Y 1/2   degree resolution, derived from optimal Ci/Ca","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = GriddingMachine","category":"page"},{"location":"API/#Datasets-for-CliMA-Look-Up-Table","page":"API","title":"Datasets for CliMA Look-Up-Table","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"All data are stored in a general structure, but they are catergorized to     different data types. The general data structure is","category":"page"},{"location":"API/","page":"API","title":"API","text":"GriddedDataset","category":"page"},{"location":"API/#GriddingMachine.GriddedDataset","page":"API","title":"GriddingMachine.GriddedDataset","text":"struct GriddedDataset{FT<:AbstractFloat}\n\nA general struct to store data\n\nFields\n\ndata\nGridded dataset\nres_lat\nLatitude resolution [°]\nres_lon\nLongitude resolution [°]\nres_time\nTime resolution: D-M-Y-C: day-month-year-century\nvar_name\nVariable name\nvar_attr\nVariable attribute\ndt\nType label\n\n\n\n\n\n","category":"type"},{"location":"API/","page":"API","title":"API","text":"Note it here that the dt field in GriddedDataset is the data     identity of the stored data. Please refer the lists below.","category":"page"},{"location":"API/#Dataset-types","page":"API","title":"Dataset types","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Current supported dataset formats are","category":"page"},{"location":"API/","page":"API","title":"API","text":"AbstractFormat\nFormatNC\nFormatTIFF","category":"page"},{"location":"API/#GriddingMachine.AbstractFormat","page":"API","title":"GriddingMachine.AbstractFormat","text":"abstract type AbstractFormat\n\nHierachy of AbstractFormat\n\nFormatTIFF\nFormatNC\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.FormatNC","page":"API","title":"GriddingMachine.FormatNC","text":"struct FormatNC\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.FormatTIFF","page":"API","title":"GriddingMachine.FormatTIFF","text":"struct FormatTIFF\n\n\n\n\n\n","category":"type"},{"location":"API/#General-type","page":"API","title":"General type","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractDataset","category":"page"},{"location":"API/#GriddingMachine.AbstractDataset","page":"API","title":"GriddingMachine.AbstractDataset","text":"abstract type AbstractDataset{FT}\n\nHierachy of AbstractDataset\n\nAbstractLeafDataset\nAbstractStandDataset\n\n\n\n\n\n","category":"type"},{"location":"API/#Leaf-level-dataset","page":"API","title":"Leaf level dataset","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractLeafDataset\nLeafChlorophyll\nLeafNitrogen\nLeafPhosphorus\nLeafSLA\nVcmaxOptimalCiCa","category":"page"},{"location":"API/#GriddingMachine.AbstractLeafDataset","page":"API","title":"GriddingMachine.AbstractLeafDataset","text":"abstract type AbstractLeafDataset{FT}\n\nHierachy of AbstractLeafDataset\n\nLeafChlorophyll\nLeafNitrogen\nLeafPhosphorus\nLeafSLA\nVcmaxOptimalCiCa\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.LeafChlorophyll","page":"API","title":"GriddingMachine.LeafChlorophyll","text":"struct LeafChlorophyll{FT}\n\n<details> <summary> Struct for leaf chlorophyll content Link to Dataset Source </summary>\n\n@article{croft2020global,\n    author = {Croft, H and Chen, JM and Wang, R and Mo, G and Luo, S and Luo, X\n        and He, L and Gonsamo, A and Arabian, J and Zhang, Y and others},\n    year = {2020},\n    title = {The global distribution of leaf chlorophyll content},\n    journal = {Remote Sensing of Environment},\n    volume = {236},\n    pages = {111479},\n}\n\n</details>\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.LeafNitrogen","page":"API","title":"GriddingMachine.LeafNitrogen","text":"struct LeafNitrogen{FT}\n\n<details> <summary> Struct for leaf nitrogen content Link to Dataset Source </summary>\n\n@article{butler2017mapping,\n    author = {Butler, Ethan E and Datta, Abhirup and Flores-Moreno, Habacuc and\n        Chen, Ming and Wythers, Kirk R and Fazayeli, Farideh and Banerjee,\n        Arindam and Atkin, Owen K and Kattge, Jens and Amiaud, Bernard and\n        others},\n    year = {2017},\n    title = {Mapping local and global variability in plant trait\n        distributions},\n    journal = {Proceedings of the National Academy of Sciences},\n    volume = {114},\n    number = {51},\n    pages = {E10937--E10946}\n}\n\n</details>\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.LeafPhosphorus","page":"API","title":"GriddingMachine.LeafPhosphorus","text":"struct LeafPhosphorus{FT}\n\n<details> <summary> Struct for leaf phosphorus content Link to Dataset Source </summary>\n\n@article{butler2017mapping,\n    author = {Butler, Ethan E and Datta, Abhirup and Flores-Moreno, Habacuc and\n        Chen, Ming and Wythers, Kirk R and Fazayeli, Farideh and Banerjee,\n        Arindam and Atkin, Owen K and Kattge, Jens and Amiaud, Bernard and\n        others},\n    year = {2017},\n    title = {Mapping local and global variability in plant trait\n        distributions},\n    journal = {Proceedings of the National Academy of Sciences},\n    volume = {114},\n    number = {51},\n    pages = {E10937--E10946}\n}\n\n</details>\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.LeafSLA","page":"API","title":"GriddingMachine.LeafSLA","text":"struct LeafSLA{FT}\n\n<details> <summary> Struct for leaf specific leaf area (inverse of leaf mass per area) Link to Dataset Source </summary>\n\n@article{butler2017mapping,\n    author = {Butler, Ethan E and Datta, Abhirup and Flores-Moreno, Habacuc and\n        Chen, Ming and Wythers, Kirk R and Fazayeli, Farideh and Banerjee,\n        Arindam and Atkin, Owen K and Kattge, Jens and Amiaud, Bernard and\n        others},\n    year = {2017},\n    title = {Mapping local and global variability in plant trait\n        distributions},\n    journal = {Proceedings of the National Academy of Sciences},\n    volume = {114},\n    number = {51},\n    pages = {E10937--E10946}\n}\n\n</details>\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.VcmaxOptimalCiCa","page":"API","title":"GriddingMachine.VcmaxOptimalCiCa","text":"struct VcmaxOptimalCiCa{FT}\n\nStruct for Vcmax estimated from optimal Ci:Ca ratio\n\n\n\n\n\n","category":"type"},{"location":"API/#Stand-level-datasets","page":"API","title":"Stand level datasets","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractStandDataset\nCanopyHeightGLAS\nClumpingIndexMODIS\nClumpingIndexPFT\nGPPMPIv006\nGPPVPMv20\nLAIMonthlyMean\nNPPModis\nSIFTropomi740\nTreeDensity","category":"page"},{"location":"API/#GriddingMachine.AbstractStandDataset","page":"API","title":"GriddingMachine.AbstractStandDataset","text":"abstract type AbstractStandDataset{FT}\n\nHierachy of AbstractStandDataset\n\nCanopyHeightGLAS\nClumpingIndexMODIS\nClumpingIndexPFT\nGPPMPIv006\nGPPVPMv20\nLAIMonthlyMean\nNPPModis\nTreeDensity\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.CanopyHeightGLAS","page":"API","title":"GriddingMachine.CanopyHeightGLAS","text":"struct CanopyHeightGLAS{FT}\n\n<details> <summary> Struct for canopy height from GLAS ICESat Link to Dataset Source </summary>\n\n@article{simard2011mapping,\n    author = {Simard, Marc and Pinto, Naiara and Fisher, Joshua B and Baccini,\n        Alessandro},\n    year = {2011},\n    title = {Mapping forest canopy height globally with spaceborne lidar},\n    journal = {Journal of Geophysical Research: Biogeosciences},\n    volume = {116},\n    number = {G4021}\n}\n\n</details>\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.ClumpingIndexMODIS","page":"API","title":"GriddingMachine.ClumpingIndexMODIS","text":"struct ClumpingIndexMODIS{FT}\n\nStruct for canopy height from GLAS ICESat\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.ClumpingIndexPFT","page":"API","title":"GriddingMachine.ClumpingIndexPFT","text":"struct ClumpingIndexPFT{FT}\n\nStruct for canopy height from GLAS ICESat, for different plant functional     types. The indices are Broadleaf, Needleleaf, C3 grasses, C4 grasses,     and shrubland\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.GPPMPIv006","page":"API","title":"GriddingMachine.GPPMPIv006","text":"struct GPPMPIv006{FT}\n\nStruct for MPI GPP v006\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.GPPVPMv20","page":"API","title":"GriddingMachine.GPPVPMv20","text":"struct GPPVPMv20{FT}\n\nStruct for VPM GPP v20\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.LAIMonthlyMean","page":"API","title":"GriddingMachine.LAIMonthlyMean","text":"struct LAIMonthlyMean{FT}\n\n<details> <summary> Struct for monthly mean MODIS LAI Link to Dataset Source </summary>\n\n@article{mao2019global,\n    author = {Mao, J and Yan, B},\n    year = {2019},\n    title = {Global monthly mean leaf area index climatology, 1981-2015},\n    journal = {ORNL DAAC}\n}\n\n</details>\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.NPPModis","page":"API","title":"GriddingMachine.NPPModis","text":"struct NPPModis{FT}\n\nStruct for Modis NPP\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.SIFTropomi740","page":"API","title":"GriddingMachine.SIFTropomi740","text":"struct SIFTropomi740{FT}\n\nStruct for TROPOMI SIF @ 740 nm\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.TreeDensity","page":"API","title":"GriddingMachine.TreeDensity","text":"struct TreeDensity{FT}\n\nStruct for tree density (number of trees per km⁻²)\n\n\n\n\n\n","category":"type"},{"location":"API/#Surface-datasets","page":"API","title":"Surface datasets","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractSurfaceDataset\nFloodPlainHeight\nLandMaskERA5\nLandElevation\nRiverHeight\nRiverLength\nRiverManning\nRiverWidth\nUnitCatchmentArea","category":"page"},{"location":"API/#GriddingMachine.AbstractSurfaceDataset","page":"API","title":"GriddingMachine.AbstractSurfaceDataset","text":"abstract type AbstractSurfaceDataset{FT}\n\nHierachy of AbstractSurfaceDataset\n\nLandMaskERA5\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.FloodPlainHeight","page":"API","title":"GriddingMachine.FloodPlainHeight","text":"struct FloodPlainHeight{FT}\n\nFlood plain height\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.LandMaskERA5","page":"API","title":"GriddingMachine.LandMaskERA5","text":"struct LandMaskERA5{FT}\n\nStruct for land mask from ERA5\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.LandElevation","page":"API","title":"GriddingMachine.LandElevation","text":"struct LandElevation{FT}\n\nLand elevation (height above mean sea level)\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.RiverHeight","page":"API","title":"GriddingMachine.RiverHeight","text":"struct RiverHeight{FT}\n\nRiver height\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.RiverLength","page":"API","title":"GriddingMachine.RiverLength","text":"struct RiverLength{FT}\n\nRiver length\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.RiverManning","page":"API","title":"GriddingMachine.RiverManning","text":"struct RiverManning{FT}\n\nRiver manning coefficient\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.RiverWidth","page":"API","title":"GriddingMachine.RiverWidth","text":"struct RiverWidth{FT}\n\nRiver width\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.UnitCatchmentArea","page":"API","title":"GriddingMachine.UnitCatchmentArea","text":"struct UnitCatchmentArea{FT}\n\nUnit catchment area\n\n\n\n\n\n","category":"type"},{"location":"API/#LOAD-and-READ-Look-Up-Table","page":"API","title":"LOAD and READ Look-Up-Table","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Griddingmachine package allows for reading data from both the artifact and     local files. To read the artifacts, function query_LUT is     provided:","category":"page"},{"location":"API/","page":"API","title":"API","text":"query_LUT","category":"page"},{"location":"API/#GriddingMachine.query_LUT","page":"API","title":"GriddingMachine.query_LUT","text":"query_LUT(dt::AbstractDataset)\nquery_LUT(dt::AbstractDataset, res_g::String)\nquery_LUT(dt::AbstractDataset, year::Int, res_g::String, res_t::String)\n\nQuery the file location from artifacts, given\n\ndt Dataset type, subtype of AbstractDataset\nyear Which year\nres_g Resolution in degree\nres_t Resolution in time\n\nReturn the following:\n\nPath to artifact data file\nFormat of the data\nVariable name of NC file or Band of Tiff file\nTime resolution\nWhether latitude is reversed\nVariable name of gridded data\nVariable attribute of gridded data\n\n\n\n\n\n","category":"function"},{"location":"API/","page":"API","title":"API","text":"A general function is provided to load the look-up tables. Before you load the     table, you need to know what data you want to read (see     AbstractDataset), data from which year (required for some     datasets), geophysical resolution (required for some datasets), and time     resolution (resuired for some datasets). Also, if you want to load local     files, you need to know the file name, dataset format, and the dataset     label (e.g., variable name in *.nc files, or band number in *.tif files).     Be aware that some datasets may be very big, be patient when downloading     the data files. Also, you need to use computers or servers with enough     memory, otherwise the program may crash when loading the data.","category":"page"},{"location":"API/","page":"API","title":"API","text":"load_LUT","category":"page"},{"location":"API/#GriddingMachine.load_LUT","page":"API","title":"GriddingMachine.load_LUT","text":"load_LUT(dt::AbstractDataset{FT}) where {FT<:AbstractFloat}\nload_LUT(dt::AbstractDataset{FT},\n         res_g::String,\n         res_t::String) where {FT<:AbstractFloat}\nload_LUT(dt::AbstractDataset{FT},\n         year::Int,\n         res_g::String,\n         res_t::String) where {FT<:AbstractFloat}\nload_LUT(dt::AbstractDataset{FT},\n         file::String,\n         format::AbstractFormat,\n         label::String,\n         res_t::String,\n         rev_lat::Bool,\n         var_name::String,\n         var_attr::Dict{String,String}) where {FT<:AbstractFloat}\n\nLoad look up table and return the struct, given\n\ndt Dataset type, subtype of AbstractDataset\nyear Which year\nres_g Resolution in degree\nres_t Resolution in time\nfile File name to read, useful to read local files\nformat Dataset format from AbstractFormat\nlabel Variable label in dataset, e.g., var name in .nc files, band numer in   .tif files\nrev_lat Whether latitude is stored reversely in the dataset, e.g., 90 to   -90. If true, mirror the dataset on latitudinal direction\nvar_name Variable name of GriddedDataset\nvar_attr Variable attributes of GriddedDataset\n\nNote that the artifact for GPP is about\n\n500 MB for 0.2 degree resolution (5^2 * 36018046)\n2600 MB for 0.083 degree resolution (12^2 * 36018046)\n\n\n\n\n\n","category":"function"},{"location":"API/","page":"API","title":"API","text":"The loaded data may contain null values filled with different default values.     To remove these unexpected data, a general function is provided to mask out     these values.","category":"page"},{"location":"API/","page":"API","title":"API","text":"mask_LUT!","category":"page"},{"location":"API/#GriddingMachine.mask_LUT!","page":"API","title":"GriddingMachine.mask_LUT!","text":"mask_LUT!(ds::GriddedDataset, default::Number)\nmask_LUT!(ds::GriddedDataset, lims::Array)\n\nFilter out the unrealistic values from the dataset, given\n\nds GriddedDataset type struct\ndefault Optional. Default value to replace NaNs\nlims Lower and upper limits for the dataset\n\n\n\n\n\n","category":"function"},{"location":"API/","page":"API","title":"API","text":"A general function is provided to read the look-up tables. Note that you need     to use realistic latitude, longitude, and index (required for some     datasets) to read the data properly. For example, latitude must be within     the range of [-90,90], longitude must be within the range of [-180,180]     or [0,360], and index must be in [1,12] if you use it as month or     [0,46] if you read the 8-day products. The functions lat_ind     and lon_ind help convert latitude and longitude into index,     respectively.","category":"page"},{"location":"API/","page":"API","title":"API","text":"read_LUT\nlat_ind\nlon_ind","category":"page"},{"location":"API/#GriddingMachine.read_LUT","page":"API","title":"GriddingMachine.read_LUT","text":"read_LUT(ds::GriddedDataset{FT},\n         lat::FT,\n         lon::FT,\n         ind::Int) where {FT<:AbstractFloat}\nread_LUT(ds::GriddedDataset{FT},\n         dt::AbstractDataset{FT},\n         lat::FT,\n         lon::FT,\n         ind::Int) where {FT<:AbstractFloat}\nread_LUT(ds::GriddedDataset{FT},\n         lat::Tuple{FT,FT},\n         lon::Tuple{FT,FT},\n         ind::Tuple{Int,Int}) where {FT<:AbstractFloat}\nread_LUT(ds::GriddedDataset{FT},\n         dt::AbstractDataset{FT},\n         lat::Tuple{FT,FT},\n         lon::Tuple{FT,FT},\n         ind::Tuple{Int,Int}) where {FT<:AbstractFloat}\n\nRead the dataset from given\n\nds GriddedDataset type struct\ndt Dataset type, subtype of AbstractDataset\nlat Latitude\nlon Longitude\nind Index of cycle in the year, e.g., 1-46, or Month number from 1 to 12   for LAIMonthlyMean DataType\n\n\n\n\n\n","category":"function"},{"location":"API/#GriddingMachine.lat_ind","page":"API","title":"GriddingMachine.lat_ind","text":"lat_ind(lat::FT; res::FT) where {FT<:AbstractFloat}\n\nRound the latitude and return the index in a matrix, Given\n\nlat Latitude\nres Resolution in latitude\n\n\n\n\n\n","category":"function"},{"location":"API/#GriddingMachine.lon_ind","page":"API","title":"GriddingMachine.lon_ind","text":"lon_ind(lon::FT; res::FT=1) where {FT<:AbstractFloat}\n\nRound the longitude and return the index in a matrix, Given\n\nlon Longitude\nres Resolution in longitude\n\n\n\n\n\n","category":"function"},{"location":"API/","page":"API","title":"API","text":"An alternative view method is provided in parallel with read_LUT. The     difference is that there is no memory allocation using view_LUT so that     changes can be made directly to the view, whereas read_LUT creates new     number or arrays and changes cannot be made to original data directly.","category":"page"},{"location":"API/","page":"API","title":"API","text":"view_LUT","category":"page"},{"location":"API/#GriddingMachine.view_LUT","page":"API","title":"GriddingMachine.view_LUT","text":"view_LUT(ds::GriddedDataset{FT},\n         lat::FT,\n         lon::FT,\n         ind::Int) where {FT<:AbstractFloat}\nview_LUT(ds::GriddedDataset{FT},\n         dt::AbstractDataset{FT},\n         lat::FT,\n         lon::FT,\n         ind::Int) where {FT<:AbstractFloat}\nview_LUT(ds::GriddedDataset{FT},\n         lat::Tuple{FT,FT},\n         lon::Tuple{FT,FT},\n         ind::Tuple{Int,Int}) where {FT<:AbstractFloat}\nview_LUT(ds::GriddedDataset{FT},\n         dt::AbstractDataset{FT},\n         lat::Tuple{FT,FT},\n         lon::Tuple{FT,FT},\n         ind::Tuple{Int,Int}) where {FT<:AbstractFloat}\n\nView the dataset from given\n\nds GriddedDataset type struct\ndt Dataset type, subtype of AbstractDataset\nlat Latitude\nlon Longitude\nind Index of cycle in the year, e.g., 1-46, or Month number from 1 to 12   for LAIMonthlyMean DataType\n\n\n\n\n\n","category":"function"},{"location":"API/#Regrid-the-Look-Up-Table","page":"API","title":"Regrid the Look-Up-Table","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"For better matching the gridded data, we also provide a function to regrid the     dataset.","category":"page"},{"location":"API/","page":"API","title":"API","text":"regrid_LUT","category":"page"},{"location":"API/#GriddingMachine.regrid_LUT","page":"API","title":"GriddingMachine.regrid_LUT","text":"regrid_LUT(ds::AbstractDataset{FT},\n           zoom::Int;\n           nan_weight::Bool=false\n) where {FT<:AbstractFloat}\n\nRegrid the data from high to low resolution and return the struct, given\n\nds GriddedDataset type struct\nzoom Integer geophysical zoom factor (>=2)\nnan_weight Optional. If true, assuming nan = 0; if false, neglecting it.\n\n\n\n\n\n","category":"function"},{"location":"API/#Save-the-Look-Up-Table","page":"API","title":"Save the Look-Up-Table","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"To avoid unnecessary reading or regridding the dataset, a function is provided     to save the dataset to .nc file","category":"page"},{"location":"API/","page":"API","title":"API","text":"save_LUT","category":"page"},{"location":"API/#GriddingMachine.save_LUT","page":"API","title":"GriddingMachine.save_LUT","text":"save_LUT(ds::GriddedDataset{FT},\n         filename::String) where {FT<:AbstractFloat}\nsave_LUT(data::Array{FT,2},\n         filename::String) where {FT<:AbstractFloat}\nsave_LUT(data::Array{FT,3},\n         filename::String,\n         var_name::String,\n         var_attr::Dict{String,String}) where {FT<:AbstractFloat}\n\nSave the dataset, given\n\nds GriddedDataset type struct\nfilename NC file name to save to\ndata Temporaty data\nvar_name Variable name in nc file\nvar_attr Variable attributes in nc file\n\nNote that save_LUT(data, filename) is designed to use with temporaty data     only, be cautious when using this function.\n\n\n\n\n\n","category":"function"},{"location":"API/#Gridding-RAW-data","page":"API","title":"Gridding RAW data","text":"","category":"section"},{"location":"API/#RAW-dataset-types","page":"API","title":"RAW dataset types","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Currently, GriddingMachine supports the following raw dataset types:","category":"page"},{"location":"API/","page":"API","title":"API","text":"AbstractUngriddedData","category":"page"},{"location":"API/#GriddingMachine.AbstractUngriddedData","page":"API","title":"GriddingMachine.AbstractUngriddedData","text":"abstract type AbstractUngriddedData{FT}\n\nHierachy of AbstractUngriddedData\n\nAbstractMODIS500m\nAbstractMODIS1km\n\n\n\n\n\n","category":"type"},{"location":"API/","page":"API","title":"API","text":"The 500 m resolution datasets include","category":"page"},{"location":"API/","page":"API","title":"API","text":"AbstractMODIS500m\nMOD15A2Hv006LAI","category":"page"},{"location":"API/#GriddingMachine.AbstractMODIS500m","page":"API","title":"GriddingMachine.AbstractMODIS500m","text":"abstract type AbstractMODIS500m{FT}\n\nHierachy of AbstractMODIS500m\n\nMOD15A2Hv006LAI\n\n\n\n\n\n","category":"type"},{"location":"API/#GriddingMachine.MOD15A2Hv006LAI","page":"API","title":"GriddingMachine.MOD15A2Hv006LAI","text":"struct MODISLeafAreaIndex\n\nLeaf area index\n\n\n\n\n\n","category":"type"},{"location":"API/","page":"API","title":"API","text":"The 1 km resolution datasets include","category":"page"},{"location":"API/","page":"API","title":"API","text":"AbstractMODIS1km","category":"page"},{"location":"API/#GriddingMachine.AbstractMODIS1km","page":"API","title":"GriddingMachine.AbstractMODIS1km","text":"abstract type AbstractMODIS1km{FT}\n\nHierachy of AbstractMODIS1km\n\n\n\n\n\n","category":"type"},{"location":"API/#Steps-to-grid-RAW-data","page":"API","title":"Steps to grid RAW data","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"GriddingMachine allows to grid the data in a multiple threading manner, to     realize this while avoid extensive memory quota, some CSV cache files will     be created during the process (with the risk of high disk usage). To     make it more user friendly, a customized function is used to dynamically     regulate the number of threadings:","category":"page"},{"location":"API/","page":"API","title":"API","text":"dynamic_workers","category":"page"},{"location":"API/#GriddingMachine.dynamic_workers","page":"API","title":"GriddingMachine.dynamic_workers","text":"dynamic_workers(nthread::Int)\n\nChange the number of workers according to CPU_THREADS, given\n\nnthread Number of thread required\n\n\n\n\n\n","category":"function"},{"location":"API/","page":"API","title":"API","text":"However, because the MODIS tile information file is very large (e.g., 500 m     resolution tile infomation takes up to >40 GB memory to load), the tile     matricies (for both latitude and longitude) will not be loaded a priori. To     load the tile matricies, you will need to call load_MODIS! function     manually,","category":"page"},{"location":"API/","page":"API","title":"API","text":"load_MODIS!","category":"page"},{"location":"API/#GriddingMachine.load_MODIS!","page":"API","title":"GriddingMachine.load_MODIS!","text":"load_MODIS!(dt::AbstractUngriddedData) where {FT<:AbstractFloat}\n\nPrepare parameters (file name and etc) to work on, given\n\ndt AbstractUngriddedData type ungridded data type\n\n\n\n\n\n","category":"function"},{"location":"API/","page":"API","title":"API","text":"Note that, if you want to load the matricies in every thread, you will need     command like @everywhere load_MODIS!(MOD15A2Hv006LAI{Float32}()). What it     does is loading 500 m resolution tiles information to every thread     (worker). If you pass a 1 km data set type to load_MODIS!, it will load     1 km resolution tiles information automatically, you don't need to worry     about it. However, be cautious to use corresponding tile information for     your project.","category":"page"},{"location":"API/","page":"API","title":"API","text":"Once the tile information is loaded, you may query the files you want to work     on using query_RAW, which returns an array of paramters to pass to     different threads. Note, you may need to use fetch_RAW to download the     datasets first.","category":"page"},{"location":"API/","page":"API","title":"API","text":"fetch_RAW\nquery_RAW","category":"page"},{"location":"API/#GriddingMachine.fetch_RAW","page":"API","title":"GriddingMachine.fetch_RAW","text":"fetch_RAW(dt::MOD15A2Hv006LAI, year::Int)\n\nDownload RAW product data, given\n\ndt AbstractUngriddedData type ungridded data type\nyear Which year data to download\n\n\n\n\n\n","category":"function"},{"location":"API/#GriddingMachine.query_RAW","page":"API","title":"GriddingMachine.query_RAW","text":"query_RAW(dt::AbstractUngriddedData,\n          year::Int,\n          days::Int) where {FT<:AbstractFloat}\nquery_RAW(dt::MOD15A2Hv006LAI,\n          year::Int) where {FT<:AbstractFloat}\n\nPrepare parameters (file name and etc) to work on, given\n\ndt AbstractUngriddedData type ungridded data type\nyear AD year using format XXXX\ndays How many days per cycle\n\nNote that query_RAW(dt, year) function returns the follwings\n\nFolder in on Fluo server that contains files to process\nFile name pattern, such as \"MOD15A2H.AYYYYDOY.*.hdf\"\nFile name prefix, such as \"MOD15A2H.A\"\nBand name to process, such as \"Lai_500m\"\nCache folder location to store generated CSV files\nScaling and offset array [a,b] as in y=ax+b\nMask of minimum and maximum values\n\n\n\n\n\n","category":"function"},{"location":"API/","page":"API","title":"API","text":"Next, you should be able to grid the RAW files using grid_RAW, which     extract tile information from file name using parse_HV","category":"page"},{"location":"API/","page":"API","title":"API","text":"parse_HV","category":"page"},{"location":"API/#GriddingMachine.parse_HV","page":"API","title":"GriddingMachine.parse_HV","text":"parse_HV(modis_name::String)\n\nReturn the H and V index, given\n\nmodis_name MODIS file name\n\n\n\n\n\n","category":"function"},{"location":"API/","page":"API","title":"API","text":"Then, grid_RAW will match the data information with tile latitude and     longitude, and save the data to cache CSV files, which will stay on your     hard drive until you remove them manually.","category":"page"},{"location":"API/","page":"API","title":"API","text":"grid_RAW","category":"page"},{"location":"API/#GriddingMachine.grid_RAW","page":"API","title":"GriddingMachine.grid_RAW","text":"grid_RAW(param::Array)\ngrid_RAW(dt::MOD15A2Hv006LAI{FT},\n         params::Array{Array,1},\n         nthread::Int) where {FT<:AbstractFloat}\n\nGrid the data and save it to a csv file, given\n\nparam Parameter sets to pass to different threads\ndt AbstractUngriddedData type ungridded data type\nparams Array of param\nnthread Number of threads to run the code in parallel\n\n\n\n\n\n","category":"function"},{"location":"API/","page":"API","title":"API","text":"The last step you need is to read the cache CSV files and compile them to nc     datasets. As the file may be extremely large for very high resolution data     (e.g., 500 m), files are again stored as cache nc files, and then they will     be compile into one nc file.","category":"page"},{"location":"API/","page":"API","title":"API","text":"compile_RAW","category":"page"},{"location":"API/#GriddingMachine.compile_RAW","page":"API","title":"GriddingMachine.compile_RAW","text":"compile_RAW(param::Array)\ncompile_RAW(dt::MOD15A2Hv006LAI{FT},\n            params::Array{Any,1},\n            zooms::Int) where {FT<:AbstractFloat}\n\nCompile RAW data to nc files, given\n\nparam Array of parameters that pass into threads\ndt AbstractUngriddedData type ungridded data type\nparams Array of parameters from query_RAW, not that this param   is different from the param used in compile_RAW\nzooms Geometrical resolution zoom factor, zooms=x means 1/x degree\n\n\n\n\n\n","category":"function"},{"location":"API/","page":"API","title":"API","text":"The disadvantage is that you need a huge space to store the cache file, whereas     the advantages are","category":"page"},{"location":"API/","page":"API","title":"API","text":"all cache files can be reused, no recalculation is required if you need to   grid the data to another resolution\nif you encounter any error (e.g., memory shortage), you don't need to redo   the calculations for cached files\nyou can run the gridding and compiling in multi-thread manner","category":"page"}]
}
